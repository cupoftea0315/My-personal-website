---
title: "**ENV222 EXERCISE**"
subtitle: "*R in statistics*"
author:
  - "TC-tea"
date: "`r Sys.Date()`"
date-format: "YYYY.MM.DD"
format: html
toc: true
toc-location: left
fontsize: 12pt
fontfamily: Tahoma
---

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      background-color: white;
      color: black;
    }
    .dark-mode {
      background-color: black;
      color: white;
    }
    .light-code {
      color: black;
    }
    .dark-code {
      color: white;
    }
    .quarto-output pre:not([class*="language-"]) {
      background-color: transparent;
      color: inherit;
    }
    .quarto-output pre[class*="language-"] {
      background-color: #F5F5F5;
      color: black;
    }
    .dark-mode .quarto-output pre[class*="language-"] {
      background-color: #2B2B2B;
      color: white;
    }
    /* Add this CSS */
    #myBtn {
      position: fixed;
      top: 20px;
      right: 20px;
      border: none;
      border-radius: 10px;
      padding: 10px;
      background-color: lightgray;
    }
    /* Add this CSS */
    #myBtn:before {
      content: "‚òÄ";
    }
    /* Add this CSS */
    .dark-mode #myBtn:before {
      content: "üåô";
    }
  </style>
</head>

<body>
  <button id="myBtn" onclick="myFunction()"></button>
  <script>
    function myFunction() {
      var element = document.body;
      element.classList.toggle("dark-mode");
      var codeBlocks = document.querySelectorAll(".quarto-output pre[class*='language-']");
      codeBlocks.forEach(function(block) {
        block.classList.toggle("light-code");
        block.classList.toggle("dark-code");
      });
    }
  </script>
</body>


<a href="#" id="back-to-top" title="Back to top">^</a>
<style>
    #back-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        font-size: 24px;
        color: #fff;
        background-color: #000;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        text-align: center;
        line-height: 40px;
    }
</style>

üëâüèª[Click to enter the note section](../ENV222 note/ENV222 note.html)

# <span style="color:gray; font-family:Microsoft JhengHei;">**1**</span> Rmarkdown Exercise

[NA]{style="color:red"}

# <span style="color:gray; font-family:Microsoft JhengHei;">**2**</span> Character Exercise

[NA]{style="color:red"}

# <span style="color:gray; font-family:Microsoft JhengHei;">**3**</span> Time Exercise

#### 1. Today

1.  Which day of the year is it?

```{r}
Sys.time()
```

2.  Convert it as "Year, Month in English and Date, Weekday in English", such as "2023, January 1, Sunday".

```{r}
format(Sys.Date(), format = '%Y, %B, %d, %A')
```

3.  Suppose we get to know each other at 15:00, September 13, 2022. How many days have we known each other until now? How many hours? How many seconds?

```{r}
t1 <- Sys.time()
t2 <- strptime( "2022-9-13 15:00:00", format="%Y-%m-%d %H:%M:%S" )
difftime(time1 = t1, time2 = t2, units = 'secs')
difftime(time1 = t1, time2 = t2, units = 'days')
difftime(time1 = t1, time2 = t2, units = 'hours')
```

4.  The anniversary is September 13, 2023. What day is it? How about in 2024? Plot a graph for September 13 of each year, with the weekday as x and the year as y.

```{r}
t3 <- as.Date( "9/13/2023", format="%m/%d/%Y" )
format(t3, format="%A")
t4 <- as.Date( "9/13/2024", format="%m/%d/%Y" )
format(t4, format="%A")
dates <- seq(as.Date("2020-09-13"), as.Date("2040-09-13"), by="year")
weekdays <- factor(weekdays(dates, abbreviate=TRUE), 
                   levels=c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))
weekdays <- as.integer(format(dates, "%u"))
plot(weekdays, as.Date(dates, format="%Y" ), 
     xlab="Weekday", ylab="Year", main="September 13th, 2020-2040")
```

#### 2. The airquality dataset

1.  Create a new column "Date", showing the date in the format of "Year-month-day", such as "2023-01-31".

```{r}
air<-read.csv("data/airquality.csv")
day <- paste("2022-",air$Month,"-",air$Day,sep="")
air$Date <- as.Date(day, format="%Y-%m-%d")
```

2.  Plot a graph for each atmospheric variable (i.e. ozone in ppb, solar radiation in W m^-2^, wind speed in m s^-1^, air temperature in ¬∞C) against the date.

```{r eval=FALSE}
air1<-na.omit(air)
subsets <- split(air1, air1$Month)
plots <- lapply(subsets, function(subset) {
  plot(subset$Day, subset$Ozone,ylab = "Ozone pbb" ,main = paste("Ozone, ", unique(subset$Month))
)})
  par(mfrow = c(2, 3))
  for (i in seq_along(plots)) {
    plot(plots[[i]])
  }
library(ggthemes)
library(latex2exp)
dtf <- airquality
dtf5 <- dtf %>% subset(Date < "1973-06-01")

ggplot(dtf5) +
    geom_point(aes(x = Date, y = Ozone))+
    labs(y = "Ozone (ppb)") +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
ggplot(dtf5) +
    geom_point(aes(x = Date, y = Solar.R))+
    labs(y = TeX("$\\text{Solar Radiation } (W\\cdot m^{-2})$")) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(dtf5) +
    geom_point(aes(x = Date, y = Wind))+
    labs(y = TeX("$\\text{Wind speed }m\\cdot m^{-1}$")) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggplot(dtf5) +
    geom_point(aes(x = Date, y = Temp))+
    labs(y = TeX("$\\text{Temperature }\\circ C$")) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

3.  Create a new column "Weekday", showing the day in the week (1 as Monday and 7 as Sunday).

```{r eval=FALSE}
# install.packages("lubridate")
library(lubridate)
dtf$Weekday <- wday(as.Date(dtf$Date), week_start = 1)
```

4.  Calculate the mean values of each atmospheric variable for each weekday.

```{r eval=FALSE}
air1<-na.omit(air)
tapply(as.numeric(air1$Ozone),air1$Weekday,mean)

library(tidyverse)
mean_dtf <- dtf %>%
    drop_na() %>%
    group_by(Weekday) %>%
    summarise(Ozone = mean(Ozone),
            Solar.R = mean(Solar.R),
            Wind = mean(Wind),
            Temp = mean(Temp))

```

5.  Plot a graph for each atmospheric variable with the mean values against the weekdays.<br>

```{r eval=FALSE}
library(latex2exp)
library(patchwork)
mean_ozone <- ggplot(mean_dtf) +
    geom_line(aes(x = Weekday, y = Ozone)) +
    labs(y = "Ozone (ppb)") +
    theme_classic()

mean_solar <- ggplot(mean_dtf) +
    geom_line(aes(x = Weekday, y = Solar.R)) +
    labs(y = TeX("$\\text{Solar Radiation } (W\\cdot m^{-2})$")) +
    theme_classic()

mean_wind <- ggplot(mean_dtf) +
    geom_line(aes(x = Weekday, y = Wind))+
    labs(y = TeX("$\\text{Wind speed }m\\cdot m^{-1}$")) +
    theme_classic()

mean_temp <- ggplot(mean_dtf) +
    geom_line(aes(x = Weekday, y = Temp))+
    labs(y = TeX("$\\text{Temperature }\\circ C$")) +
    theme_classic()
```

#### 3. The Smart Flux data set The smartflux.zip data set was obtained from the flux observation at the Outdoor Research and Teaching Station (ORTS), XJTLU. It was supposed to be an automatic continuous measurement at a half-hourly base, saved in daily files. However, there were missing data in the records for some reason. How many data files are missing? How many records are missing?

```{r eval=FALSE}
setwd("data/smartflux/") # Remeber to delete the first file
temp <- list.files() %>% 
    substr(start = 1, stop =10) %>%
    strptime(format = "%Y-%m-%d") %>%
    format("%Y-%m-%d")

missing_files <- 0
for(i in 1:(length(temp)-1)){
    diff <- as.vector(difftime(temp[i+1], temp[i], units = "days"))
    if(diff != 1){
        missing_files <- missing_files + diff -1
    }
}
print(missing_files)

temp <- list.files()
files <- lapply(temp, function(i){
    read.table(i, fill = TRUE)
})

missing_records <- 0
for(i in 1:length(files)){
    records <- length(files[[i]][3:nrow(files[[i]]),4])
    missing_records <- missing_records + 48 - records
}

missing_records <- missing_records + 48 * missing_files
print(missing_records)
```

# <span style="color:gray; font-family:Microsoft JhengHei;">**4**</span> Plot Exercise

1.  [I think the range of the colour is enough by using red to blue, purple is unnecessary which may lead the graph ugly.]{style="color:#007bff"}
2.  <br>
    1.  [Where are the x and y labs? Although information are simple, but we still need the basic elements.]{style="color:#007bff"}<br> <img src="images/5.1.1.jpg" width="425" height="341"/>
    2.  [The main problem is there do not have any unit in the y label. Further more, I think we'd better not to use this type of cover like p53-/-.]{style="color:#007bff"}<br> <img src="images/5.2.4.jpg" width="400" height="216"/>
    3.  [We'd better not to use 3D plot in our essay, especially for some plot which involving proportionality.]{style="color:#007bff"}<br> <img src="images/5.3.1.jpg" width="425" height="341"/>
    4.  [Those two figures can be combine together with different colour. And maybe there is one more thing that we can change the theme to blank which will make readers more easy to figure.]{style="color:#007bff"}<br> <img src="images/5.4.2.1.jpg" width="396" height="238"/><img src="images/5.4.2.2.jpg" width="396" height="238"/>
3.  R-code chunk:

```{r echo=FALSE}
par(mar = c(0, 0, 0, 0))
```

```{r figure1, echo=TRUE, fig.cap= 'A scatterplot'}
library(latex2exp)
plot(iris$Sepal.Length, iris$Petal.Length, pch = 16, las = 1, 
     xlab = TeX('D$_p$($\\mu$m)'), 
     ylab = expression(frac('dN', 'dlogD'[p] * '(cm' ^-3 * ')')))
```

4.  R-code chunk:\

```{r echo=TRUE}
mymat <- matrix(c(1, 2, 3, 4), nrow = 2)
layout(mymat, widths = c(1, 2, 3, 2), heights = c(2, 1, 1, 2))
plot(co2)
plot(co2)
plot(co2)
plot(co2)
```

5.  [There are some errors related to the figure edges, which prevent me from generating a PDF_book.]{style="color:#007bff"}<br> See Figure \@ref(fig:figure1).












# [SessionInfo:]{style="color:green"}
```{r echo=FALSE}
sessionInfo()
```